services:
  postgres:
    image: postgres:15
    container_name: cybercell-postgres
    env_file:
      - ./.env
    environment:
      - PGPASSWORD=hackathon2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init-db:/docker-entrypoint-initdb.d
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: >
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=16MB
      -c maintenance_work_mem=128MB
    networks:
      - cybercell-network
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=$PGPASSWORD pg_isready -U cybercell_user -d cybercell"]
      interval: 5s
      timeout: 5s
      retries: 5

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: cybercell-timescale
    env_file:
      - ./.env
    environment:
      - PGPASSWORD=hackathon2024
    ports:
      - "5433:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./config/timescale-init:/docker-entrypoint-initdb.d
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: >
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=16MB
      -c maintenance_work_mem=128MB
      -c timescaledb.max_background_workers=16
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
      -c shared_preload_libraries=timescaledb
      -c timescaledb.restoring=off
    networks:
      - cybercell-network
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=$PGPASSWORD pg_isready -U cybercell_user -d timescale_cybercell"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: cybercell-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cybercell-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  ml-notebook:
    image: jupyter/scipy-notebook:latest
    container_name: cybercell-ml
    ports:
      - "8888:8888"
    volumes:
      - ./src/ml:/home/jovyan/work
      - ./data:/home/jovyan/data
    environment:
      - JUPYTER_TOKEN=hackathon2024
      - JUPYTER_ENABLE_LAB=yes
    env_file:
      - ./.env
    networks:
      - cybercell-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: cybercell-api
    ports:
      - "8000:8000"
    volumes:
      - ./src/api:/app
      - ./data:/app/data
      - api_node_modules:/app/node_modules
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cybercell-network
    command: npm run start:dev

  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: cybercell-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/app
      - frontend_node_modules:/app/node_modules
    env_file:
      - ./.env
    depends_on:
      api-dev:
        condition: service_started
    networks:
      - cybercell-network
    command: npm start

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: cybercell-mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./data/mlflow:/mlflow
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cybercell-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:latest
    container_name: cybercell-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=hackathon2024
    env_file:
      - ./.env
    networks:
      - cybercell-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  timescale_data:
    name: cybercell-hackathon_timescale_data
  redis_data:
  grafana_data:
  frontend_node_modules:
  api_node_modules:

networks:
  cybercell-network:
    driver: bridge